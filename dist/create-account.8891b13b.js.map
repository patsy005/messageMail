{"mappings":"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","sources":["<anon>","src/js/form.js"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire8dea\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire8dea\"] = parcelRequire;\n}\nparcelRequire(\"ic7rk\");\nclass $d2247bac48b6a171$var$Form {\n    _form = document.querySelector(\".form\");\n    _inputs = document.querySelectorAll(\".form input\");\n    _overlay = document.querySelector(\".overlay\");\n    _successLoginMsg = document.querySelector(\".success-msg-window\");\n    _closeOverlayBtn = this._successLoginMsg.querySelector(\".btn\");\n    _NAME = \"name\";\n    _EMAIL = \"email\";\n    _PASSWORD = \"password\";\n    constructor(){\n        this._form.addEventListener(\"submit\", this.formValidation.bind(this));\n        this._overlay.addEventListener(\"click\", this.toggleOverlay.bind(this));\n        this._closeOverlayBtn.addEventListener(\"click\", this.toggleOverlay.bind(this));\n    }\n    toggleOverlay() {\n        this._overlay.classList.toggle(\"hidden\");\n        this._successLoginMsg.classList.toggle(\"hidden\");\n    }\n    inputCheck(key) {\n        const input = document.querySelector(`#${key}`);\n        return input;\n    }\n    nameIsValid(key, obj) {\n        const input = this.inputCheck(key);\n        const nameIsValid = obj.name.trim() !== \"\" && obj.name.length >= 2;\n        if (!nameIsValid && input.id === key) this.addError(key, input);\n        else this.removeError(input);\n        return nameIsValid;\n    }\n    emailIsValid(key, obj) {\n        const input = this.inputCheck(key);\n        const emailRegex = new RegExp(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\n        const emailIsValid = emailRegex.test(obj.email);\n        if (!emailIsValid && input.id === key) this.addError(key, input);\n        else this.removeError(input);\n        return emailIsValid;\n    }\n    passwordIsValid(key, obj) {\n        const input = this.inputCheck(key);\n        const passwordRegex = new RegExp(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/);\n        const passwordIsValid = passwordRegex.test(obj.password);\n        const passwordPlaceholder = input.nextElementSibling.nextElementSibling;\n        if (!passwordIsValid && input.id === key) {\n            this.addError(key, input);\n            passwordPlaceholder.classList.add(\"display-none\");\n        } else {\n            this.removeError(input);\n            passwordPlaceholder.classList.remove(\"display-none\");\n        }\n        return passwordIsValid;\n    }\n    errorMsg(input) {\n        if (input.id === \"name\") return `field requires with min 2 characters`;\n        if (input.id === \"email\") return `is incorrect`;\n        if (input.id === \"password\") return `requires min.8 letters and at least 1 symbol, uppercase letter and number`;\n    }\n    addError(objKey, input) {\n        input.nextElementSibling.textContent = `${objKey[0].toUpperCase() + objKey.slice(1)} ${this.errorMsg(input)}`;\n        input.classList.add(\"error-input\");\n    }\n    removeError(input) {\n        input.nextElementSibling.textContent = \"\";\n        input.classList.remove(\"error-input\");\n    }\n    formValidation(e) {\n        e.preventDefault();\n        const formData = [\n            ...new FormData(this._form)\n        ];\n        const formObj = Object.fromEntries(formData);\n        for(const key in formObj){\n            const input = this.inputCheck(key);\n            const nameIsValid = this.nameIsValid(this._NAME, formObj);\n            const passwordIsValid = this.passwordIsValid(this._PASSWORD, formObj);\n            const emailIsValid = this.emailIsValid(this._EMAIL, formObj);\n            if (emailIsValid && nameIsValid && passwordIsValid) {\n                const errMsgs = document.querySelectorAll(\".err-msg\");\n                errMsgs.forEach((err)=>err.textContent = \"\");\n                this._inputs.forEach((input)=>{\n                    input.value = \"\";\n                });\n                input.classList.remove(\"error-input\");\n                this.toggleOverlay();\n            }\n        }\n    // for (const key in this._formObj) {\n    // \tconst input = document.querySelector(`#${key}`)\n    // \tconsole.log(input)\n    // \tif (!nameIsValid && input.id === 'name') {\n    // \t\tthis.addError(key, input)\n    // \t}\n    // \tif (!emailIsValid && input.id === 'email') {\n    // \t\tthis.addError(key, input)\n    // \t}\n    // \tif (!passwordIsValid && input.id === 'password') {\n    // \t\tthis.addError(key, input)\n    // \t}\n    // \tif (emailIsValid && nameIsValid && passwordIsValid) {\n    // \t\tconst errMsgs = document.querySelectorAll('.err-msg')\n    // \t\terrMsgs.forEach(err => (err.textContent = ''))\n    // \t\tthis._inputs.forEach(input => {\n    // \t\t\tinput.value = ''\n    // \t\t})\n    // \t\tinput.classList.remove('error-input')\n    // \t\tthis.toggleOverlay()\n    // \t}\n    // }\n    }\n}\n// // form validation\n// function errorMsg(input) {\n// \tif (input.id === 'name') {\n// \t\treturn `field requires with min 2 characters`\n// \t}\n// \tif (input.id === 'email') {\n// \t\treturn `is incorrect`\n// \t}\n// \tif (input.id === 'password') {\n// \t\treturn `requires min.8 letters and at least 1 symbol, uppercase letter and number`\n// \t}\n// }\n// function handlingFormErrors(objKey, input) {\n// \tinput.nextElementSibling.textContent = `${objKey[0].toUpperCase() + objKey.slice(1)} ${errorMsg(input)}`\n// \tinput.classList.add('error-input')\n// }\n// function formValidation() {\n// \tconst formData = [...new FormData(form)]\n// \tconst formObj = Object.fromEntries(formData)\n// \tconst inputs = document.querySelectorAll('.form input')\n// \tconst nameIsValid = formObj.name.trim() !== '' && formObj.name.length >= 2\n// \tconsole.log(nameIsValid)\n// \tconst emailRegex = new RegExp(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)\n// \tconst emailIsValid = emailRegex.test(formObj.email)\n// \tconsole.log(emailRegex.test(formObj.email))\n// \tconst passwordRegex = new RegExp(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/)\n// \tconst passwordIsValid = passwordRegex.test(formObj.password)\n// \tfor (const key in formObj) {\n// \t\tconst input = document.querySelector(`#${key}`)\n// \t\tif (!nameIsValid && input.id === 'name') {\n// \t\t\thandlingFormErrors(key, input)\n// \t\t}\n// \t\tif (!emailIsValid && input.id === 'email') {\n// \t\t\thandlingFormErrors(key, input)\n// \t\t}\n// \t\tif (!passwordIsValid && input.id === 'password') {\n// \t\t\thandlingFormErrors(key, input)\n// \t\t}\n// \t\tif (emailIsValid && nameIsValid && passwordIsValid) {\n// \t\t\tconst errMsgs = document.querySelectorAll('.err-msg')\n// \t\t\terrMsgs.forEach(err => (err.textContent = ''))\n// \t\t\tinputs.forEach(input => (input.value = ''))\n// \t\t\tinput.classList.remove('error-input')\n// \t\t\toverlayToggle()\n// \t\t}\n// \t}\n// }\n// // handling overlay\n// function overlayToggle() {\n// \toverlay.classList.toggle('hidden')\n// \tsuccessLoginMsg.classList.toggle('hidden')\n// }\n// // listeneres\n// form.addEventListener('submit', e => {\n// \te.preventDefault()\n// \tformValidation()\n// })\n// overlay.addEventListener('click', overlayToggle)\n// closeOverlayBtn.addEventListener('click', overlayToggle)\nconst $d2247bac48b6a171$var$form2 = new $d2247bac48b6a171$var$Form();\n\n\n//# sourceMappingURL=create-account.8891b13b.js.map\n","import 'core-js/stable'\r\n\r\nclass Form {\r\n\t_form = document.querySelector('.form')\r\n\t_inputs = document.querySelectorAll('.form input')\r\n\r\n\t_overlay = document.querySelector('.overlay')\r\n\t_successLoginMsg = document.querySelector('.success-msg-window')\r\n\t_closeOverlayBtn = this._successLoginMsg.querySelector('.btn')\r\n\r\n\t_NAME = 'name'\r\n\t_EMAIL = 'email'\r\n\t_PASSWORD = 'password'\r\n\r\n\tconstructor() {\r\n\t\tthis._form.addEventListener('submit', this.formValidation.bind(this))\r\n\t\tthis._overlay.addEventListener('click', this.toggleOverlay.bind(this))\r\n\t\tthis._closeOverlayBtn.addEventListener('click', this.toggleOverlay.bind(this))\r\n\t}\r\n\r\n\ttoggleOverlay() {\r\n\t\tthis._overlay.classList.toggle('hidden')\r\n\t\tthis._successLoginMsg.classList.toggle('hidden')\r\n\t}\r\n\r\n\tinputCheck(key) {\r\n\t\tconst input = document.querySelector(`#${key}`)\r\n\t\treturn input\r\n\t}\r\n\r\n\tnameIsValid(key, obj) {\r\n\t\tconst input = this.inputCheck(key)\r\n\r\n\t\tconst nameIsValid = obj.name.trim() !== '' && obj.name.length >= 2\r\n\t\tif (!nameIsValid && input.id === key) {\r\n\t\t\tthis.addError(key, input)\r\n\t\t} else {\r\n\t\t\tthis.removeError(input)\r\n\t\t}\r\n\r\n\t\treturn nameIsValid\r\n\t}\r\n\r\n\temailIsValid(key, obj) {\r\n\t\tconst input = this.inputCheck(key)\r\n\t\tconst emailRegex = new RegExp(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)\r\n\t\tconst emailIsValid = emailRegex.test(obj.email)\r\n\t\tif (!emailIsValid && input.id === key) {\r\n\t\t\tthis.addError(key, input)\r\n\t\t} else {\r\n\t\t\tthis.removeError(input)\r\n\t\t}\r\n\t\treturn emailIsValid\r\n\t}\r\n\r\n\tpasswordIsValid(key, obj) {\r\n\t\tconst input = this.inputCheck(key)\r\n\t\tconst passwordRegex = new RegExp(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/)\r\n\t\tconst passwordIsValid = passwordRegex.test(obj.password)\r\n\r\n\t\tconst passwordPlaceholder = input.nextElementSibling.nextElementSibling\r\n\r\n\t\tif (!passwordIsValid && input.id === key) {\r\n\t\t\tthis.addError(key, input)\r\n\t\t\tpasswordPlaceholder.classList.add('display-none')\r\n\t\t} else {\r\n\t\t\tthis.removeError(input)\r\n\t\t\tpasswordPlaceholder.classList.remove('display-none')\r\n\t\t}\r\n\t\treturn passwordIsValid\r\n\t}\r\n\r\n\terrorMsg(input) {\r\n\t\tif (input.id === 'name') {\r\n\t\t\treturn `field requires with min 2 characters`\r\n\t\t}\r\n\r\n\t\tif (input.id === 'email') {\r\n\t\t\treturn `is incorrect`\r\n\t\t}\r\n\r\n\t\tif (input.id === 'password') {\r\n\t\t\treturn `requires min.8 letters and at least 1 symbol, uppercase letter and number`\r\n\t\t}\r\n\t}\r\n\r\n\taddError(objKey, input) {\r\n\t\tinput.nextElementSibling.textContent = `${objKey[0].toUpperCase() + objKey.slice(1)} ${this.errorMsg(input)}`\r\n\t\tinput.classList.add('error-input')\r\n\t}\r\n\r\n\tremoveError(input) {\r\n\t\tinput.nextElementSibling.textContent = ''\r\n\t\tinput.classList.remove('error-input')\r\n\t}\r\n\r\n\tformValidation(e) {\r\n\t\te.preventDefault()\r\n\r\n\t\tconst formData = [...new FormData(this._form)]\r\n\t\tconst formObj = Object.fromEntries(formData)\r\n\r\n\t\tfor (const key in formObj) {\r\n\t\t\tconst input = this.inputCheck(key)\r\n\t\t\tconst nameIsValid = this.nameIsValid(this._NAME, formObj)\r\n\t\t\tconst passwordIsValid = this.passwordIsValid(this._PASSWORD, formObj)\r\n\t\t\tconst emailIsValid = this.emailIsValid(this._EMAIL, formObj)\r\n\r\n\t\t\tif (emailIsValid && nameIsValid && passwordIsValid) {\r\n\t\t\t\tconst errMsgs = document.querySelectorAll('.err-msg')\r\n\t\t\t\terrMsgs.forEach(err => (err.textContent = ''))\r\n\t\t\t\tthis._inputs.forEach(input => {\r\n\t\t\t\t\tinput.value = ''\r\n\t\t\t\t})\r\n\t\t\t\tinput.classList.remove('error-input')\r\n\r\n\t\t\t\tthis.toggleOverlay()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// for (const key in this._formObj) {\r\n\t\t// \tconst input = document.querySelector(`#${key}`)\r\n\t\t// \tconsole.log(input)\r\n\t\t// \tif (!nameIsValid && input.id === 'name') {\r\n\t\t// \t\tthis.addError(key, input)\r\n\t\t// \t}\r\n\r\n\t\t// \tif (!emailIsValid && input.id === 'email') {\r\n\t\t// \t\tthis.addError(key, input)\r\n\t\t// \t}\r\n\r\n\t\t// \tif (!passwordIsValid && input.id === 'password') {\r\n\t\t// \t\tthis.addError(key, input)\r\n\t\t// \t}\r\n\r\n\t\t// \tif (emailIsValid && nameIsValid && passwordIsValid) {\r\n\t\t// \t\tconst errMsgs = document.querySelectorAll('.err-msg')\r\n\t\t// \t\terrMsgs.forEach(err => (err.textContent = ''))\r\n\t\t// \t\tthis._inputs.forEach(input => {\r\n\t\t// \t\t\tinput.value = ''\r\n\t\t// \t\t})\r\n\t\t// \t\tinput.classList.remove('error-input')\r\n\r\n\t\t// \t\tthis.toggleOverlay()\r\n\t\t// \t}\r\n\t\t// }\r\n\t}\r\n}\r\n// // form validation\r\n\r\n// function errorMsg(input) {\r\n// \tif (input.id === 'name') {\r\n// \t\treturn `field requires with min 2 characters`\r\n// \t}\r\n\r\n// \tif (input.id === 'email') {\r\n// \t\treturn `is incorrect`\r\n// \t}\r\n\r\n// \tif (input.id === 'password') {\r\n// \t\treturn `requires min.8 letters and at least 1 symbol, uppercase letter and number`\r\n// \t}\r\n// }\r\n\r\n// function handlingFormErrors(objKey, input) {\r\n// \tinput.nextElementSibling.textContent = `${objKey[0].toUpperCase() + objKey.slice(1)} ${errorMsg(input)}`\r\n// \tinput.classList.add('error-input')\r\n// }\r\n\r\n// function formValidation() {\r\n// \tconst formData = [...new FormData(form)]\r\n// \tconst formObj = Object.fromEntries(formData)\r\n// \tconst inputs = document.querySelectorAll('.form input')\r\n\r\n// \tconst nameIsValid = formObj.name.trim() !== '' && formObj.name.length >= 2\r\n// \tconsole.log(nameIsValid)\r\n\r\n// \tconst emailRegex = new RegExp(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)\r\n// \tconst emailIsValid = emailRegex.test(formObj.email)\r\n// \tconsole.log(emailRegex.test(formObj.email))\r\n\r\n// \tconst passwordRegex = new RegExp(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/)\r\n// \tconst passwordIsValid = passwordRegex.test(formObj.password)\r\n\r\n// \tfor (const key in formObj) {\r\n// \t\tconst input = document.querySelector(`#${key}`)\r\n// \t\tif (!nameIsValid && input.id === 'name') {\r\n// \t\t\thandlingFormErrors(key, input)\r\n// \t\t}\r\n\r\n// \t\tif (!emailIsValid && input.id === 'email') {\r\n// \t\t\thandlingFormErrors(key, input)\r\n// \t\t}\r\n\r\n// \t\tif (!passwordIsValid && input.id === 'password') {\r\n// \t\t\thandlingFormErrors(key, input)\r\n// \t\t}\r\n\r\n// \t\tif (emailIsValid && nameIsValid && passwordIsValid) {\r\n// \t\t\tconst errMsgs = document.querySelectorAll('.err-msg')\r\n// \t\t\terrMsgs.forEach(err => (err.textContent = ''))\r\n// \t\t\tinputs.forEach(input => (input.value = ''))\r\n// \t\t\tinput.classList.remove('error-input')\r\n// \t\t\toverlayToggle()\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\n// // handling overlay\r\n// function overlayToggle() {\r\n// \toverlay.classList.toggle('hidden')\r\n// \tsuccessLoginMsg.classList.toggle('hidden')\r\n// }\r\n\r\n// // listeneres\r\n// form.addEventListener('submit', e => {\r\n// \te.preventDefault()\r\n\r\n// \tformValidation()\r\n// })\r\n// overlay.addEventListener('click', overlayToggle)\r\n// closeOverlayBtn.addEventListener('click', overlayToggle)\r\n\r\nconst form2 = new Form()\r\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$d2247bac48b6a171$var$Form","_form","document","querySelector","_inputs","querySelectorAll","_overlay","_successLoginMsg","_closeOverlayBtn","_NAME","_EMAIL","_PASSWORD","constructor","addEventListener","formValidation","bind","toggleOverlay","classList","toggle","inputCheck","key","input","nameIsValid","obj","name","trim","length","removeError","addError","emailIsValid","emailRegex","RegExp","test","email","passwordIsValid","passwordRegex","password","passwordPlaceholder","nextElementSibling","remove","add","errorMsg","objKey","textContent","toUpperCase","slice","e","preventDefault","formData","FormData","formObj","Object","fromEntries","errMsgs","forEach","value"],"version":3,"file":"create-account.8891b13b.js.map"}